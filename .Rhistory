getwd(pollutantmean.R)
getwd(specdata)
getwd("specdata)
getwd("specdata")
pollutantmean("specdata", "nitrate", 23)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
all_files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for (i in id) {
df <- rbind(df, read.csv(all_files[i]))
}
mean(df[, pollutant], na.rm = TRUE)
}
source('~/pollutantmean.R')
pollutantmean("specdata", "nitrate", 70:72)
source('~/pollutantmean.R')
pollutantmean("specdata", "sulfate", 1:10)
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
4
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
> submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
complete <- function(directory, id = 1:332)
{
all_files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for (i in id)
{
y <- read.csv(all_files[i])
nobs <- sum(complete.cases(y))
x <- data.frame(i, nobs)
df <- rbind(dat, x)
}
colnames(df) <- c("id", "nobs")
df
}
complete("specdata", 1)
complete("specdata", 1)
complete <- function(directory, id = 1:332)
{
all_files <- list.files(directory, full.names = TRUE)
df <- data.frame()
for (i in id)
{
y <- read.csv(all_files[i])
nobs <- sum(complete.cases(y))
x <- data.frame(i, nobs)
df <- rbind(df, x)
}
colnames(df) <- c("id", "nobs")
df
}
complete("specdata", 1)
source("complete.R")
complete("specdata", 30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
6
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
corr <- function(directory, threshold = 0) {
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- tmp[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- tmp[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
corr <- function(directory, threshold = 0) {
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- tmp[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
df
}
summary(cr)
corr <- function(directory, threshold = 0)
{
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- y[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
df
}
summary(cr)
corr("specdata", 150)
source("corr.R")
corr <- function(directory, threshold = 0)
{
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- y[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
df
}
summary(cr)
corr("specdata", 150)
summary(cr)
corr("specdata", 150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
+ source("complete.R")
+ cr <- corr("specdata", 150)
+ head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr<-corr("specdata",150)
head(cr)
>
corr <- function(directory, threshold = 0)
{
all_files <- list.files(directory, full.names = TRUE)
df <- vector(mode = "numeric", length = 0)
for (i in 1:length(all_files)) {
x <- read.csv(all_files[i])
csum <- sum((!is.na(x$sulfate)) & (!is.na(x$nitrate)))
if (csum > threshold) {
y <- x[which(!is.na(x$sulfate)), ]
z <- y[which(!is.na(y$nitrate)), ]
df <- c(df, cor(z$sulfate, z$nitrate))
}
}
df
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
all_files <- list.files(directory, full.names = TRUE)
all_files("specdata")
source("pollutantmean.R")
all_files("specdata")
list.files("specdata", full.names = TRUE)
read.csv(list.files("specdata", full.names = TRUE))
x<-5:15
y<-1:11
nestedfun = function(x,y){
ifelse(x<9, y+9, ifelse(x==9, x, ifelse(x==12, NA,x-y)))}
nestedfun(x,y)
nestedfun = function(x,y){
ifelse(x<9, y+9, ifelse(x==9, x, ifelse(x==12, NA,x-y)))
x
y
}
nestedfun(x,y)
nestedfun(x,y)
nestedfun = function(x,y){
ifelse(x<9, y+9, ifelse(x==9, x, ifelse(x==12, NA,x-y)))
x
}
nestedfun(x,y)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summary(Rproof)
summary(Rprof)
summaryRprof()
summaryRprof(lm)
wd()
dir()
getwd()
dir()
ls
ls()
ls(dir)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
> head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol()
ncol(outcome)
ncol(outcome-of-care-measures.csv)
ncol("outcome-of-care-measures.csv")
names(outcome)
view()
view(outcome)
View(outcome)
hospital.data <- read.csv("~/rprog-data-ProgAssignment3-data/hospital-data.csv", header=FALSE)
View(hospital.data)
data<-read.csv("hospital-data.csv")
head(data)
View(data)
nrow(data)
rownames(data)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
##outcome_name: "heart attack", "heart failure", "pneumonia"
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#get rid of the NA's in the desired outcome column
required_columns <- as.numeric(new_data[,outcome_column])
bad <- is.na(required_columns)
desired_data <- new_data[!bad, ]
#find the hospitals in the rows with the minimum outcome value
columns_considered <- as.numeric(desired_data[, outcome_column])
desired_rows <- which(columns_considered == min(columns_considered))
desired_hospitals <- desired_data[desired_rows, 2]
#if there are multiple hospitals with the minimum outcome value, then
#return the first hospital name from the alphabetically sorted hospital
#names list
if (length(desired_hospitals) > 1) {
hospitals_sorted <- sort(desired_hospitals)
hospitals_sorted[1]
}
else {
desired_hospitals
}
}
best("TX", "heart attack")
best("TX", "heart attack")
best("MD", "pneumonia")
best("NY", "hert attack")
source("best.R")
best("NY", "hert attack")
best("MD", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#check if the state and outcomes are valid
states <- data[ , 7]
outcomes <- c("heart attack", "heart failure", "pneumonia")
if ((state %in% states) == FALSE) {
stop(print("invalid state"))
}
else if ((outcome %in% outcomes) == FALSE) {
stop(print("invalid outcome"))
}
#get the subset of the data with the desired state
new_data <- subset(data, State == state)
#get the desired outcome column from the data file
if (outcome == "heart attack") {
outcome_column <- 11
}
else if (outcome == "heart failure") {
outcome_column <- 17
}
else {
outcome_column <- 23
}
#if num is greater that the number of hospitals in the desired state,
# return NA
if (is.numeric(num) == TRUE) {
if (length(data[,2]) < num) {
return(NA)
}
}
#get rid of the NA's in the desired outcome column
new_data[, outcome_column] <- as.numeric(new_data[,outcome_column])
bad <- is.na(new_data[, outcome_column])
desired_data <- new_data[!bad, ]
#arrange the modified dataframe in ascending order of the outcome values
outcome_column_name <- names(desired_data)[outcome_column]
hospital_column_name <- names(desired_data)[2]
index <- with(desired_data, order(desired_data[outcome_column_name], desired_data[hospital_column_name]))
ordered_desired_data <- desired_data[index, ]
#if num is either "best" or "worst", then interpret it to the
#corresponding numerical value
if (is.character(num) == TRUE) {
if (num == "best") {
num = 1
}
else if (num == "worst") {
num = length(ordered_desired_data[, outcome_column])
}
}
#return the hospital name with the outcome ranking of number
ordered_desired_data[num, 2]
}
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
#read in the desired data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#create a list of states and initialize a character array to hold the
#required hospital names
state <- levels(factor(data[, 7]))
hospital <- vector(mode="character")
for (i in seq(state)) {
hospital[i] <- rankhospital(state[i], outcome, num)
}
data.frame(hospital, state)
}
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rankall("heart failure", 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source(data.R)
source("data.R")
View(data)
View(data)
unique(data$Hospital.Name)
unique(data$State)
install.packages(pkgs = "caret",
dependencies = c("Depends", "Imports"))
library("caret", lib.loc="~/R/win-library/3.2")
install.packages("pbkrtest")
library("lme4", lib.loc="~/R/win-library/3.2")
detach("package:lme4", unload=TRUE)
library("nlme", lib.loc="C:/Program Files/R/R-3.2.2/library")
install.packages(pkgs = "lme4", dependencies = c("Depends", "Imports"))
install.packages(pkgs = "nlme", dependencies = c("Depends", "Imports"))
install.packages(pkgs = "nlme", dependencies = c("Depends", "Imports"))
install.packages(c("caretEnsemble", "curl", "digest", "evaluate", "formatR", "GGally", "ggplot2", "gridExtra", "gtable", "Hmisc", "htmltools", "httr", "knitr", "latticeExtra", "lme4", "lmerTest", "maps", "maptools", "Matrix", "memoise", "multcomp", "munsell", "mvtnorm", "nlme", "pbapply", "quantreg", "R.methodsS3", "R.oo", "R6", "Rcpp", "RcppEigen", "RCurl", "rmarkdown", "rstudioapi", "scales", "shiny", "sp", "TH.data", "xtable"))
library("e1071", lib.loc="~/R/win-library/3.2")
library("xtable", lib.loc="~/R/win-library/3.2")
detach("package:e1071", unload=TRUE)
install.packages(c("tm", "NLP", "RWeka"))
install.packages("RWeka")
install.packages("RWekajars")
library("ggplot2", lib.loc="~/R/win-library/3.2")
detach("package:ggplot2", unload=TRUE)
install.packages("AnnotLists")
install.packages("rJava")
install.packages("RWeka")
install.packages("openNLP")
library("NLP", lib.loc="~/R/win-library/3.2")
install.packages("annotate")
ls
wd()
dir()
getwd()
install.packages("RWekajars")
shiny::runApp('CourseraDataScience-Capstone')
shiny::runApp()
